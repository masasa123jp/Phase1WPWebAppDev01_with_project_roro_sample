/* global RORO_CHAT_CFG */
/**
 * Frontâ€‘end script for the RORO Chatbot.
 *
 * This script powers the interactive chat widget generated by the
 * [roro_chatbot] shortcode. It listens for user input, renders
 * messages in the log with appropriate styling and calls the WordPress
 * REST API to obtain AI-generated replies. A typing indicator is
 * displayed while awaiting a response. Errors and empty replies fall
 * back to localized messages supplied via RORO_CHAT_CFG.i18n.
 */
(function($){
  $(function(){
    // Retrieve configuration from localized data
    var cfg = window.RORO_CHAT_CFG || {};
    var $log = $('#roro-chat-log');
    var $input = $('#roro-chat-text');
    var $button = $('#roro-chat-send');
    // Conversation state
    var convId = 0;
    /**
     * Append a chat bubble to the log.
     * @param {string} role 'user' or 'assistant'
     * @param {string} text Message text
     */
    function addMessage(role, text){
      var $bubble = $('<div>').addClass('roro-bubble');
      if (role === 'user') {
        $bubble.addClass('user');
      } else {
        $bubble.addClass('bot');
      }
      $bubble.text(text);
      $log.append($bubble);
      // Scroll to bottom
      $log.scrollTop($log[0].scrollHeight);
    }
    /**
     * Show or hide the typing indicator.
     * @param {boolean} show Whether to display the indicator
     */
    function setTyping(show){
      if (show) {
        if ($log.find('.roro-typing').length === 0) {
          var text = cfg.i18n && cfg.i18n.typing ? cfg.i18n.typing : '...';
          var $t = $('<div>').addClass('roro-typing').text(text);
          $log.append($t);
          $log.scrollTop($log[0].scrollHeight);
        }
      } else {
        $log.find('.roro-typing').remove();
      }
    }
    /**
     * Send the current input text to the REST API and handle the response.
     */
    function sendMessage(){
      var text = $.trim($input.val());
      if (!text) return;
      // Display user's message
      addMessage('user', text);
      $input.val('');
      setTyping(true);
      // Build request payload
      var payload = { message: text };
      if (convId) payload.conversation_id = convId;
      fetch(cfg.restBase + '/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-WP-Nonce': cfg.nonce
        },
        body: JSON.stringify(payload)
      }).then(function(res){
        return res.json();
      }).then(function(data){
        setTyping(false);
        if (data.reply) {
          convId = data.conversation_id;
          addMessage('assistant', data.reply);
        } else {
          var msg = cfg.i18n && cfg.i18n.empty_reply ? cfg.i18n.empty_reply : 'No reply.';
          addMessage('assistant', msg);
        }
      }).catch(function(){
        setTyping(false);
        var msg = cfg.i18n && cfg.i18n.error ? cfg.i18n.error : 'Error';
        addMessage('assistant', msg);
      });
    }
    // Bind events
    $button.on('click', sendMessage);
    $input.on('keypress', function(e){
      if (e.which === 13) {
        sendMessage();
        e.preventDefault();
      }
    });
  });
})(jQuery);