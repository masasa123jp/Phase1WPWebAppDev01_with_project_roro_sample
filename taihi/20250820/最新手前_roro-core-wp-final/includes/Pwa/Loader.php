<?php
/**
 * Progressive Web App (PWA) loader for the RoRo platform.
 *
 * This class registers a minimal service worker and the corresponding
 * registration script on the front end.  The service worker provides
 * basic offline support and can easily be extended or replaced with a
 * more robust implementation such as one generated by Workbox.
 *
 * By bundling the PWA functionality directly into the core plugin we
 * eliminate the need for a separate PWA plugin and ensure that the
 * feature is always available when the core is active.
 *
 * @package RoroCore\Pwa
 */

namespace RoroCore\Pwa;

use function add_action;
use function esc_url;
use function home_url;
use function is_admin;
use function wp_register_script;
use function wp_enqueue_script;
use function wp_add_inline_script;

/**
 * Class Loader
 *
 * Handles registration of a service worker and manifest for the RoRo
 * platform.  The service worker is served from the root of the site
 * at `/roro-sw.js`.  A small client script registers the service
 * worker on the front end.  This implementation intentionally keeps
 * the service worker very simple; projects that require advanced
 * offline caching should integrate Workbox or a similar tool during
 * their build process.
 */
class Loader {
    /**
     * Constructor. Hooks into WordPress actions to bootstrap the PWA.
     */
    public function __construct() {
        add_action( 'wp_enqueue_scripts', [ $this, 'enqueue_scripts' ] );
        add_action( 'init', [ $this, 'serve_service_worker' ] );
    }

    /**
     * Enqueue the service worker registration script on the front end.
     *
     * We register an empty script handle and then attach our inline
     * registration code to it.  This ensures the inline script is
     * printed in the footer, after core WordPress scripts have loaded.
     */
    public function enqueue_scripts() : void {
        if ( is_admin() ) {
            // No need to register the service worker in the admin.
            return;
        }
        $handle = 'roro-core-pwa';
        // Register an empty script so that wp_add_inline_script has a handle.
        wp_register_script( $handle, '', [], RORO_CORE_VERSION, true );
        wp_enqueue_script( $handle );
        $sw_url = esc_url( home_url( '/roro-sw.js' ) );
        $script = "if ('serviceWorker' in navigator) { navigator.serviceWorker.register('" . $sw_url . "').catch(function(e){ console.error('RoRo PWA service worker registration failed', e); }); }";
        wp_add_inline_script( $handle, $script );
    }

    /**
     * Serve the service worker script when requested.
     *
     * If the current request is for `/roro-sw.js` we output a minimal
     * service worker and exit.  This avoids WordPress attempting to
     * further handle the request.  Projects can customise or extend
     * this service worker by modifying this method.
     */
    public function serve_service_worker() : void {
        if ( isset( $_SERVER['REQUEST_URI'] ) && preg_match( '#/roro-sw\\.js$#', $_SERVER['REQUEST_URI'] ) ) {
            header( 'Content-Type: application/javascript; charset=utf-8' );
            // Basic service worker: activate immediately and proxy fetch
            echo "self.addEventListener('install', function(event) { self.skipWaiting(); });\n";
            echo "self.addEventListener('activate', function(event) { event.waitUntil(self.clients.claim()); });\n";
            echo "self.addEventListener('fetch', function(event) { event.respondWith(fetch(event.request)); });\n";
            exit;
        }
    }
}